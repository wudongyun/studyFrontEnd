
vue路由实际上是一个连接路径管理系统
在src目录下的router是编写路由的地方，index是核心
 
import Vue from 'vue'   //引入Vue
import Router from 'vue-router'  //引入vue-router
import Hello from '@/components/Hello'  //引入根目录下的Hello.vue组件
 
Vue.use(Router)  //Vue全局使用Router
 
export default new Router({
  routes: [              //配置路由，这里是个数组
    {                    //每一个链接都是一个对象
      path: '/',         //链接路径
      name: 'Hello',     //路由名称，
      component: Hello   //对应的组件模板
    }，{
      path:'/hi',
      component:Hi,
      children:[        //子路由,嵌套路由 （此处偷个懒，免得单独再列一点）
        {path:'/',component:Hi},
        {path:'hi1',component:Hi1},
        {path:'hi2',component:Hi2},
      ]
    }
  ]
})

1.router-link 是一个组件，它默认会被渲染成一个带有链接的a标签，通过to属性指定链接地址。
注意：被选中的router-link将自动添加一个class属性值.router-link-active。
    <router-link to="/">[text]</router-link>

    to：导航路径，要填写的是你在router/index.js文件里配置的path值，如果要导航到默认首页，只需要写成 to="/" ，
    [text] ：就是我们要显示给用户的导航名称

2，redirect：
重定向路径地址
注意：redirect重定向改变了url地址，如果重定向的地址需要接收参数然而没有传参不会改变地址，页面不会报错但是也不会显示内容



https://blog.csdn.net/qq_34131399/article/details/79404844?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163756527016780366575626%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=163756527016780366575626&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-27-79404844.pc_search_result_cache&utm_term=vue%E7%9A%84%E8%B7%AF%E7%94%B1&spm=1018.2226.3001.4449
路由的使用
; 名词
route：代表的时路由，即key：value的指路形式
routes：代表的时一个路由的数组，一群路由
router：路由管理，管理路由的

// 0. 如果使用模块化机制编程，导入Vue和VueRouter，要调用 Vue.use(VueRouter)
 
// 1. 定义（路由）组件。
// 可以从其他文件 import 进来
const Foo = { template: '<div>foo</div>' }
const Bar = { template: '<div>bar</div>' }
 
// 2. 定义路由
// 每个路由应该映射一个组件。 其中"component" 可以是
// 通过 Vue.extend() 创建的组件构造器，
// 或者，只是一个组件配置对象。
// 我们晚点再讨论嵌套路由。
const routes = [
  { path: '/foo', component: Foo },
  { path: '/bar', component: Bar }
]
 
// 3. 创建 router 实例，然后传 `routes` 配置
// 你还可以传别的配置参数, 不过先这么简单着吧。
const router = new VueRouter({
  routes // （缩写）相当于 routes: routes
})
 
// 4. 创建和挂载根实例。
// 记得要通过 router 配置参数注入路由，
// 从而让整个应用都有路由功能
const app = new Vue({
  router
}).$mount('#app')
 
// 现在，应用已经启动了！


; 路由的使用使用有两种方法一种是类似a标签的使用，一种是用函数来使用。
; 标签式使用
<router-view></router-view> //这里先预留一个坑
 
<router-link to="/bar">Go to Bar</router-link>//当我们在页面上点击‘Go to Bar’时就将指向的组件填到页面上的坑里

; 函数式使用
// 字符串 这里的字符串就是url的一个组成部分 比如'/****'
router.push('home')
 
// 对象
router.push({ path: 'home' })
 
// 命名的路由
router.push({ name: 'user', params: { userId: 123 }})
 
// 带查询参数，变成 /register?plan=private
router.push({ path: 'register', query: { plan: 'private' }})
建议使用第一种

